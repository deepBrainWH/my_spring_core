buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2")
		classpath("io.spring.gradle:docbook-reference-plugin:0.3.1")
		classpath("ws.antonov.gradle.plugins:gradle-plugin-protobuf:0.9.1")
	}
}

plugins {
	id "org.sonarqube" version "1.1"
}

ext {
	linkHomepage = 'https://projects.spring.io/spring-framework'
	linkCi = 'https://build.spring.io/browse/SPR'
	linkIssue = 'https://jira.spring.io/browse/SPR'
	linkScmUrl = 'https://github.com/spring-projects/spring-framework'
	linkScmConnection = 'scm:git:git://github.com/spring-projects/spring-framework.git'
	linkScmDevConnection = 'scm:git:ssh://git@github.com:spring-projects/spring-framework.git'

	moduleProjects = subprojects.findAll {
		!it.name.equals('spring-build-src') && !it.name.equals('spring-framework-bom')
	}
}

configure(allprojects) { project ->
	group = "org.springframework"
	version = qualifyVersionIfNecessary(version)

	ext.aspectjVersion       = "1.8.9"
	ext.caffeineVersion      = "2.3.5"
	ext.ehcacheVersion       = "2.10.4"
	ext.ehcachejcacheVersion = "1.0.1"
	ext.ehcache3Version      = "3.1.4"
	ext.ejbVersion           = "3.0"
	ext.fileuploadVersion    = "1.3.3"
	ext.freemarkerVersion    = "2.3.23"
	ext.groovyVersion        = "2.4.17"
	ext.gsonVersion          = "2.8.5"
	ext.guavaVersion         = "20.0"
	ext.hamcrestVersion      = "1.3"
	ext.hibernate3Version    = "3.6.10.Final"
	ext.hibernate4Version    = "4.3.11.Final"
	ext.hibernate5Version    = "5.2.10.Final"
	ext.hibval4Version       = "4.3.2.Final"
	ext.hibval5Version       = "5.2.5.Final"
	ext.hsqldbVersion        = "2.3.4"
	ext.httpasyncVersion     = "4.1.4"
	ext.httpclientVersion    = "4.5.6"
	ext.jackson2Version      = "2.8.11.3"
	ext.jasperreportsVersion = "6.2.1"  // our tests fail with JR-internal NPEs against 6.2.2 and higher
	ext.javamailVersion      = "1.5.6"
	ext.jettyVersion         = "9.3.14.v20161028"  // as of 9.3.15, Jetty has hard Servlet 3.1 requirement
	ext.jetty94Version       = "9.4.6.v20170531"  // for spring-websocket support, optimized for Jetty 9.4
	ext.jodaVersion          = "2.9.9"
	ext.jrubyVersion         = "1.7.27"  // JRuby 9000 primarily supported through JSR-223 (StandardScriptFactory)
	ext.jtaVersion           = "1.2"
	ext.junitVersion         = "4.12"
	ext.log4jVersion         = "1.2.17"
	ext.nettyVersion         = "4.1.36.Final"
	ext.okhttpVersion        = "2.7.5"
	ext.okhttp3Version       = "3.8.1"
	ext.openjpaVersion       = "2.4.2"
	ext.poiVersion           = "3.17"
	ext.reactorVersion       = "2.0.8.RELEASE"
	ext.romeVersion          = "1.7.4"
	ext.slf4jVersion         = "1.7.25"
	ext.snakeyamlVersion     = "1.17"
	ext.snifferVersion       = "1.17"
	ext.testngVersion        = "6.9.10"
	ext.tiles2Version        = "2.2.2"
	ext.tiles3Version        = "3.0.8"
	ext.tomcatVersion        = "8.5.40"
	ext.tyrusVersion         = "1.3.5"  // constrained by WebLogic 12.1.3 support
	ext.undertowVersion      = "1.3.33.Final"
	ext.xmlunitVersion       = "1.6"
	ext.xstreamVersion       = "1.4.9"

	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"

	apply plugin: "propdeps"
	apply plugin: "java"
	apply plugin: "test-source-set-dependencies"
	apply from: "${gradleScriptDir}/ide.gradle"

	configurations {
		sniffer
		javaApiSignature
	}

	compileJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
		"-Xlint:unchecked", "-Xlint:-options", "-Werror"
	]

	compileTestJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
		"-Xlint:-unchecked", "-Xlint:-options"]

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.encoding = 'UTF-8'
		options.compilerArgs += "-parameters"
	}

	repositories {
		maven { url "https://repo.spring.io/libs-release" }
	}

	dependencies {
		testCompile("junit:junit:${junitVersion}") {
			exclude group:'org.hamcrest', module:'hamcrest-core'
		}
		testCompile("org.mockito:mockito-core:1.10.19") {
			exclude group:'org.hamcrest', module:'hamcrest-core'
		}
		testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")

		sniffer("org.codehaus.mojo:animal-sniffer-ant-tasks:${snifferVersion}")
	}
}

configure(subprojects - project(":spring-build-src")) { subproject ->
	apply plugin: "merge"
	apply from: "${gradleScriptDir}/publish-maven.gradle"

	configurations {
		jacoco
	}
	dependencies {
		jacoco("org.jacoco:org.jacoco.agent:0.7.5.201505241946:runtime")
	}

	gradle.taskGraph.whenReady {taskGraph ->
		if (taskGraph.hasTask(':sonarqube')) {
			test.jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.*"
		}
	}

	jar {
		manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
		// Don't include or exclude anything explicitly by default. See SPR-12085.
	}

	artifacts {
//		archives sourcesJar
//		archives javadocJar
	}
}

project("spring-build-src") {
	description = "Exposes gradle buildSrc for IDE support"

	apply plugin: "groovy"

	dependencies {
		compile gradleApi()
		compile localGroovy()
	}

	configurations.archives.artifacts.clear()
}

project("spring-core") {
	description = "Spring Core"

	// spring-core includes asm and repackages cglib, inlining both into the spring-core jar.
	// cglib itself depends on asm and is therefore further transformed by the JarJar task to
	// depend on org.springframework.asm; this avoids including two different copies of asm.
	def cglibVersion = "3.2.6"
	def objenesisVersion = "2.6"

	configurations {
		jarjar
		cglib
		objenesis
	}

	task cglibRepackJar(type: Jar) { repackJar ->
		repackJar.baseName = "spring-cglib-repack"
		repackJar.version = cglibVersion

		doLast() {
			project.ant {
				taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask",
					classpath: configurations.jarjar.asPath
				jarjar(destfile: repackJar.archivePath) {
					configurations.cglib.each { originalJar ->
						zipfileset(src: originalJar)
					}
					// Repackage net.sf.cglib => org.springframework.cglib
					rule(pattern: "net.sf.cglib.**", result: "org.springframework.cglib.@1")
					// As mentioned above, transform cglib's internal asm dependencies from
					// org.objectweb.asm => org.springframework.asm. Doing this counts on the
					// the fact that Spring and cglib depend on the same version of asm!
					rule(pattern: "org.objectweb.asm.**", result: "org.springframework.asm.@1")
				}
			}
		}
	}

	task objenesisRepackJar(type: Jar) { repackJar ->
		repackJar.baseName = "spring-objenesis-repack"
		repackJar.version = objenesisVersion

		doLast() {
			project.ant {
				taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask",
					classpath: configurations.jarjar.asPath
				jarjar(destfile: repackJar.archivePath) {
					configurations.objenesis.each { originalJar ->
						zipfileset(src: originalJar)
					}
					// Repackage org.objenesis => org.springframework.objenesis
					rule(pattern: "org.objenesis.**", result: "org.springframework.objenesis.@1")
				}
			}
		}
	}

	dependencies {
		cglib("cglib:cglib:${cglibVersion}@jar")
		objenesis("org.objenesis:objenesis:${objenesisVersion}@jar")
		jarjar("com.googlecode.jarjar:jarjar:1.3")

		compile(files(cglibRepackJar))
		compile(files(objenesisRepackJar))
		compile("commons-logging:commons-logging:1.2")
		optional("commons-codec:commons-codec:1.10")
		optional("org.aspectj:aspectjweaver:${aspectjVersion}")
		optional("net.sf.jopt-simple:jopt-simple:5.0.3")
		optional("log4j:log4j:${log4jVersion}")
		testCompile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
		testCompile("xmlunit:xmlunit:${xmlunitVersion}")
		testCompile("com.fasterxml.woodstox:woodstox-core:5.0.3") {
			exclude group: "stax", module: "stax-api"
		}
	}

	jar {
		// Inline repackaged cglib classes directly into spring-core jar
		dependsOn cglibRepackJar
		from(zipTree(cglibRepackJar.archivePath)) {
			include "org/springframework/cglib/**"
		}

		dependsOn objenesisRepackJar
		from(zipTree(objenesisRepackJar.archivePath)) {
			include "org/springframework/objenesis/**"
		}
	}
}

project("spring-beans") {
	description = "Spring Beans"

	dependencies {
		compile(project(":spring-core"))
		compile(files(project(":spring-core").cglibRepackJar))
		optional("javax.inject:javax.inject:1")
		optional("javax.el:javax.el-api:2.2.5")
		optional("org.yaml:snakeyaml:${snakeyamlVersion}")
		testCompile("log4j:log4j:${log4jVersion}")
		testCompile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
	}
}

project("spring_learning") {
	description = "Spring learning"

	dependencies {
		compile(project(":spring-core"))
		compile(files(project(":spring-core").cglibRepackJar))
		compile(project(":spring-beans"))
		compile group: 'junit', name: 'junit', version: '4.12'
		testCompile("log4j:log4j:${log4jVersion}")
	}
}

project("spring-beans-groovy") {
	description "Groovy Bean Definitions"

	merge.into = project(":spring-beans")
	apply plugin: "groovy"

	dependencies {
		compile(project(":spring-core"))
		optional("org.codehaus.groovy:groovy-all:${groovyVersion}")
	}

	// This module's Java and Groovy sources need to be compiled together.
	compileJava.enabled = false
	sourceSets {
		main {
			groovy {
				srcDir "src/main/java"
			}
		}
	}

	compileGroovy {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}
}

project("spring-aop") {
	description = "Spring AOP"

	dependencies {
		compile(project(":spring-beans"))
		compile(project(":spring-core"))
		compile(files(project(":spring-core").cglibRepackJar))
		compile(files(project(":spring-core").objenesisRepackJar))
		optional("org.aspectj:aspectjweaver:${aspectjVersion}")
		optional("commons-pool:commons-pool:1.6")
		optional("org.apache.commons:commons-pool2:2.4.2")
		optional("com.jamonapi:jamon:2.81")
	}
}

project("spring-expression") {
	description = "Spring Expression Language (SpEL)"

	dependencies {
		compile(project(":spring-core"))
	}
}

project("spring-instrument") {
	description = "Spring Instrument"

	jar {
		manifest.attributes["Premain-Class"] =
			"org.springframework.instrument.InstrumentationSavingAgent"
		manifest.attributes["Agent-Class"] =
			"org.springframework.instrument.InstrumentationSavingAgent"
		manifest.attributes["Can-Redefine-Classes"] = "true"
		manifest.attributes["Can-Retransform-Classes"] = "true"
		manifest.attributes["Can-Set-Native-Method-Prefix"] = "false"
	}
}

project("spring-context") {
	description = "Spring Context"

	apply plugin: "groovy"

	dependencies {
		compile(project(":spring-aop"))
		compile(project(":spring-beans"))
		compile(project(":spring-core"))
		compile(project(":spring-expression"))
		compile(files(project(":spring-core").cglibRepackJar))
		optional(project(":spring-instrument"))
		optional("javax.inject:javax.inject:1")
		optional("javax.ejb:ejb-api:${ejbVersion}")
		optional("javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0")
		optional("javax.money:money-api:1.0.1")
		optional("org.eclipse.persistence:javax.persistence:2.0.0")
		optional("javax.validation:validation-api:1.0.0.GA")
		optional("org.hibernate:hibernate-validator:${hibval4Version}")
		optional("joda-time:joda-time:${jodaVersion}")
		optional("org.aspectj:aspectjweaver:${aspectjVersion}")
		optional("org.codehaus.groovy:groovy-all:${groovyVersion}")
		optional("org.beanshell:bsh:2.0b5")
		optional("org.jruby:jruby:${jrubyVersion}")
		testCompile("javax.inject:javax.inject-tck:1")
		testCompile("org.javamoney:moneta:1.1")
		testCompile("commons-dbcp:commons-dbcp:1.4")
		testCompile("org.apache.commons:commons-pool2:2.4.2")
		testCompile("org.slf4j:slf4j-api:${slf4jVersion}")
	}
}

sonarqube {
	properties {
		property "sonar.projectName", "Spring Framework"
		property "sonar.profile", "Spring Framework"
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

configure(rootProject) {
	description = "Spring Framework"

	apply plugin: "org.asciidoctor.convert"
	apply plugin: "docbook-reference"
	apply plugin: "groovy"

	// apply plugin: "detect-split-packages"
	apply from: "${gradleScriptDir}/jdiff.gradle"

	asciidoctor {
		sourceDir project.file('src/asciidoc')
		separateOutputDirs = false
		backends = ['docbook']
		options doctype: 'book', eruby: 'erubis'
		attributes 'spring-version': project.version, 'revnumber': project.version, 'docinfo': ""
	}

	reference {
		sourceDir = asciidoctor.outputDir
		pdfFilename = "spring-framework-reference.pdf"
		epubFilename = "spring-framework-reference.epub"
		expandPlaceholders = ""
	}

	afterEvaluate {
		tasks.findAll { it.name.startsWith("reference") }.each{ it.dependsOn.add("asciidoctor") }
	}

	// TODO: DetectSplitPackagesPlugin fails in line 154 due to method not found on java.io.File.
	// TODO: Possibly related to user rights or OS differences; passes on local Windows machine.
	// detectSplitPackages {
	//	projectsToScan -= project(":spring-instrument-tomcat")
	// }

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	dependencies {  // for integration tests
		testCompile(project(":spring-aop"))
		testCompile(project(":spring-beans"))
		testCompile(project(":spring-context"))
		testCompile(project(":spring-core"))
		testCompile(project(":spring-expression"))
	}
	
	task wrapper(type: Wrapper) {
		description = "Generates gradlew[.bat] scripts"
		gradleVersion = "2.14.1"

		doLast() {
			def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m"
			def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
			File wrapperFile = file("gradlew")
			wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
				"GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
			File wrapperBatFile = file("gradlew.bat")
			wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
				"set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
		}
	}

}

configure(project(':spring-core')) {
	sonarqube {
		properties {
			property "sonar.exclusions",
					"src/main/java/org/springframework/cglib/**/*,src/main/java/org/springframework/asm/**/*"
		}
	}
}

/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */
def qualifyVersionIfNecessary(version) {
	if (rootProject.hasProperty("BRANCH_NAME")) {
		def qualifier = rootProject.getProperty("BRANCH_NAME")
		if (qualifier.startsWith("SPR-")) {
			return version.replace('BUILD', qualifier)
		}
	}
	return version
}
